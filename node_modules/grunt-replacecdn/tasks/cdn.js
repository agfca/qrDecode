  'use strict';

var _upload = require('../lib/upload');

var fs = require('fs');
var http = require('http');
var jwt = require('jsonwebtoken');
var fs = require('fs');
var path = require('path');
var os = require('os');

function getCert(){
    var cert = fs.readFileSync(path.join(getRoot(),'private.key') , 'utf-8').toString();
    return cert;
}

function getRoot() {
    var platform = os.platform();
    var root;
    if (platform === 'win32') {
        root = path.parse(process.cwd()).root;
    } else {
        root = os.homedir();
    }
    return root;
};

module.exports = function(grunt) {

  grunt.registerMultiTask('uploadcdn', 'upload to cdn', function() {

        var userKey = grunt.option('userKey');
        var cert = getCert();
        this.appname = this.options().appname;
        this.basePath = this.options().basePath;
        var _self = this;
        var done = this.async();
        var count = 0;
        var successCount = 0;
        var errorCount = 0;
        var fileCount = 0;

        this.files.forEach(function(f) {
            f.src.forEach(function(filePath){

                count++;
                fileCount++;
                var uploadPath = filePath.replace(_self.basePath ,'');
                var cid = 'p0.ifengimg.com';
                var filepath = '/fe/'+_self.appname+ uploadPath;
                var time = (new Date()).getTime();
                var token = jwt.sign({ 'fe.cid': cid , 'fe.filepath': filepath , 'time':time}, cert , { algorithm: 'HS256' });

                var params = [   {fname:'fe.cid' , fvalue : cid }
                                , {fname: 'fe.filepath' , fvalue :filepath}
                                , {fname :'fe.syncflag' ,fvalue: '1'}
                                , {fname :'username' ,fvalue: userKey}
                                , {fname :'token' ,fvalue: token}
                             ];

                _upload(filePath , params ,
                       {error:function(type , filepath , errMsg , errorCode){
                                 if(errorCode == 3){
                                    console.log(("NO upload permission!  " +errMsg).red)
                                    process.exit(1);
                                 }
                                 count--;
                                 console.log(('upload error : '+ type +' , filePath : ' +filePath +" , "+ errMsg).red);
                              },
                        success:function(filepath){
                                   count--;
                                   successCount++;
                                }
                       });
            });
        });

        //监控是否处理完毕
        var start = function(){
            setTimeout(function(){
                if(count <= 0){
                   console.log('upload files count : '+fileCount)
                   console.log('success files count : '+successCount)
                   console.log('error files count : '+errorCount)
                   done()
                }else{
                   start();
                }
            } , 2000)
        };
        start();

  });

  grunt.registerMultiTask('replacecdn', 'replace resource to cdn path.', function() {

    var options = this.options({
      encoding: grunt.file.defaultEncoding,
    });

    var fullcdnpath = options.cdnpath; //需要替换的cnd地址
    fullcdnpath = fullcdnpath.replace(/y0\./,"p0.");
    var rootpath = options.rootpath;   //相对的根路径

    if(fullcdnpath.substring(fullcdnpath.length-1) =='/'){
        fullcdnpath = fullcdnpath.substring(0 ,fullcdnpath.length-1);
    }

    this.files.forEach(function(f) {

        f.src.forEach(function(filePath){
            var content = grunt.file.read(filePath);
            content = commonReplace(content , fullcdnpath , rootpath , filePath);
            content = requireReplace(content , fullcdnpath , rootpath , filePath);
            grunt.file.write(filePath , content);
        })
    });
    grunt.log.writeln();

  });

  //普通替换
  var commonReplace = function(content , fullcdnpath , rootpath , filepath){
       var patterns = [
               /<link[^\>]+href=['"]([^"']+)["']/gi,
               /<img[^\>]+src=['"]?([^"']+)["']?/gi,
               /url\s*\(\s*([^\(\)]+)\s*\)/gi,
               /<script[^\>]+src=['"]([^"']+)["']/gi,
               /\(\s*src=['"]([^"']+)["']/gi
              ]
       grunt.util._.forEach(patterns , function(regex){
           content = content.replace(regex , function(match , url , offset, string){
                          
                var resloveUrl = reslovePath(url , rootpath , filepath);
                var sp = '';
                if(!/^\/\W/.test(url)){
                  sp += '/';
                };
                          
                if(!/^http:\/\//i.test(url)){
                   return match.replace(url, fullcdnpath +sp+ resloveUrl);     
                }else{
                   return match; 
                }
           });
        });
        return content;
  }
  
  var  requireReplace = function(content , fullcdnpath , rootpath , filepath){
        var contentBlocks = content.match(/requirejs.config(?:\r|\n|\s|\(\s*{)*paths(?:\r|\n|\s)*:(?:\r|\n|\s)*{([^}]*)}/gi); //得到paths的内容
        if(!contentBlocks){
           return content;   
        }
        for(var i=0 ; i<contentBlocks.length ; i++){
            var block = contentBlocks[i];
            var arr = block.match(/["']+[^"']*["']+[\s]*:[\s]*["']+([^"']*)["']+/gi);
            if(typeof arr !== 'undefined'){
               for(var j=0 ; j<arr.length ; j++){
                   var c = arr[j]    
                   var m = /["']+[^"']*["']+[\s]*:[\s]*(["']+([^"']*)["'])+/gi.exec(c);
                   var path1 = m[1]; //带引号的地址
                   var path2 = m[2]; //地址
                   
                   var resloveUrl = reslovePath(path2 , rootpath , filepath);
                   var sp = '';
                   if(!/^http:\/\//i.test(path2)){
                      if(!/^\/\W/.test(path2)){
                          sp += '/';
                      };
                      content = content.replace(path1, '"'+fullcdnpath +sp+ resloveUrl+'"');     
                   }
               }    
            }
        }
        return content;
  }

   
   /**
    *路径解析
    * @param url 需要替换的url
    * @param rootpath 根目录
    * @param filepath 文件完整路径名（包含文件名）
    */
   var reslovePath = function(url , rootpath , filepath){
      var filepath = filepath.substring(0 , filepath.lastIndexOf('/')); //得到文件路径
      while(true){
          var lastindex = url.lastIndexOf('../');
          if(lastindex == -1){
             break; 
          }
          url = url.replace('../' , '');
          filepath = filepath.substring(0 , filepath.lastIndexOf('/'));
      }
      url = url.replace('./' , '/');
      filepath = filepath.replace(rootpath , ''); 
      
      var ret = filepath+'/'+url;
      if(ret.substring(0,1)=='/'){
         return ret.substring(1); 
      }
      return ret;
   }
};
