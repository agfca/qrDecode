  'use strict';

module.exports = function(grunt) {

  var buildCommand = require("../lib");
  var utils = require('../lib/utils');
  var path = require("path");
  var fileUtils = require('file-utils');

  var cleanFlag = function(content){
      return content.replace(/[\r|\n|\s]*<!--\s*((end)?build|(end)?bower)[^>]*-->/gi , '');
  }


  grunt.registerMultiTask('ifbuild', 'concat compress js、css file.', function() {

    var options = this.options({
      encoding: grunt.file.defaultEncoding,
    });

    var appDir = options.appDir;
    var bowerfile = options.bowerFile || 'bower.json';
    var libs = {};
    var originalMainFiles = {}; //lib build前的文件列表
    this.files.forEach(function(f) {
        f.src.forEach(function(filePath){
              var blockFile = new buildCommand.blockFile(filePath , options);
              grunt.util._.forEach(blockFile.blocks , function(block){
                      var Blockprocessor = buildCommand.getBlockProcessor(block.blockType); //得到当前块的处理器
                      (new Blockprocessor()).processRun(block , options);
              });
              var htmlContent = blockFile.content;
              grunt.util._.forEach(blockFile.blocks , function(block){
                   var replaceBlock = block.blockOuterContent;
                   var changedBlock = block.changedContent;
                   var  blockType = block.blockType;    //块类型、js/css/requirejs
                   var  deviceType = block.blockDevice; //设备类型
                   if(typeof changedBlock === 'undefined'){
                         changedBlock = replaceBlock;
                   }
                   htmlContent = htmlContent.replace(replaceBlock , utils.wrapScript(changedBlock , blockType , deviceType));
                   if(block.islib){

                       var deviceType = block.blockDevice ? block.blockDevice : "shared";
                       if(!libs[deviceType]){
                          libs[deviceType] = [];
                       }

                       if(block.compressedFileName){
                        libs[deviceType].push(block.compressedFileName);
                       }

                       if(block.concatFileName){
                          libs[deviceType].push(block.concatFileName);
                       }

                       if(!originalMainFiles[deviceType]){
                           originalMainFiles[deviceType] = [];
                       }
                       if(block.originalFiles && block.originalFiles.length>0){
                          originalMainFiles[deviceType].push(block.originalFiles);
                       }
                   }
              });

              //将app文件写入dest目录
              var destPath = options.destPath; //目标发布的地址
              if(filePath.substring(0 , appDir.length) === appDir){
                  filePath =   filePath.substring(appDir.length);
              }
              var destFileName = path.join(destPath , filePath);
              try{
                  htmlContent = cleanFlag(htmlContent);
                  fileUtils.write(destFileName , htmlContent);  //写文件
              }catch(error){}
        });

    });

    var bowerJson = fileUtils.readJSON(path.resolve(process.cwd(), bowerfile));

    //处理压缩文件以及合并文件
    mergelib(libs , bowerJson, 'main');
    //处理原始文件
    mergelib(originalMainFiles , bowerJson , 'originalMainFiles');

    var jsonStr = JSON.stringify(bowerJson, null, '  ') + '\n';
    fileUtils.write(path.resolve(process.cwd(), bowerfile) , jsonStr);

    grunt.log.writeln();

  });


  //提取lib相关的原始文件列表
  grunt.registerMultiTask('ifbuildDebug', 'fatch lib original files.', function() {

    var options = this.options({
      encoding: grunt.file.defaultEncoding,
    });

    var appDir = options.appDir;
    var bowerfile = options.bowerFile || 'bower.json';
    var originalMainFiles = {}; //lib build前的文件列表
    this.files.forEach(function(f) {
        f.src.forEach(function(filePath){
              var blockFile = new buildCommand.blockFile(filePath , options);
              grunt.util._.forEach(blockFile.blocks , function(block){
                     if(block.islib){
                        var deviceType = block.blockDevice ? block.blockDevice : "shared";
                        if(!originalMainFiles[deviceType]){
                            originalMainFiles[deviceType] = [];
                        }

                        var Blockprocessor = buildCommand.getBlockProcessor(block.blockType);
                        var blockContent = block.blockInnerContent;
                        var blocks = (new Blockprocessor()).getBlocks(blockContent);
                        for(var i=0; i<blocks.length; i++){
                           originalMainFiles[deviceType].push(appDir+'/'+blocks[i].filePath);
                        }
                     }
              });
        });

    });

    var bowerJson = fileUtils.readJSON(path.resolve(process.cwd(), bowerfile));

    mergelib(originalMainFiles , bowerJson, "originalMainFiles");
    /*
    if(originalMainFiles.length==0 && bowerJson.originalMainFiles){
        delete bowerJson.originalMainFiles;
    }else{
        bowerJson.originalMainFiles = originalMainFiles;
    }
    */
    var jsonStr = JSON.stringify(bowerJson, null, '  ') + '\n';
    fileUtils.write(path.resolve(process.cwd(), bowerfile) , jsonStr);
    grunt.log.writeln();

  });


  var mergelib = function(object , bower , bowerItem){
        var libs = [];
        var hasitem = false;
        for(var k in object){
           hasitem = true;
           if(k == 'shared'){
              libs.push.apply(libs , object[k]);
           }else{
              var _tmp = {};
              _tmp[k] = object[k];
              libs.push(_tmp);
           }
        }
        if(!hasitem){
           delete bower[bowerItem];
        }else{
           bower[bowerItem] = libs;
        }
    }

};
